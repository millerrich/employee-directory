{"version":3,"sources":["components/Search.js","components/Result.js","utils/API.js","components/Container.js","App.js","serviceWorker.js","index.js"],"names":["SearchForm","props","className","onChange","handleInputChange","value","search","name","type","placeholder","id","ResultList","src","picture","alt","firstName","lastName","email","phone","console","log","axios","get","SearchResultContainer","state","employee","results","error","searchEmployee","employees","empSearch","i","length","toLowerCase","indexOf","push","setState","event","target","API","then","res","data","employeeRecords","first","last","thumbnail","cell","sortEmployees","catch","err","this","sort","a","b","nameA","nameB","Search","map","key","Result","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d1e5f754.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction SearchForm(props) {\r\n  return (\r\n    <div className=\"container\">\r\n    <form>\r\n      <div className=\"form-group\">\r\n        <input\r\n          onChange={props.handleInputChange}\r\n          value={props.search}\r\n          name=\"search\"\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"Search for employee\"\r\n          id=\"search\"\r\n        />\r\n      </div>\r\n    </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchForm;","import React from \"react\";\r\n\r\nfunction ResultList(props) {\r\n    return (\r\n    <tr>\r\n        <td>\r\n            <img src={props.picture} alt={props.firstName}></img>\r\n        </td>\r\n        <td>\r\n            {props.firstName}\r\n        </td>\r\n        <td>\r\n            {props.lastName}\r\n        </td>\r\n        <td>\r\n            {props.email}\r\n        </td>\r\n        <td>\r\n            {props.phone}\r\n        </td>\r\n    </tr>\r\n  )\r\n};\r\n\r\nexport default ResultList;","import axios from \"axios\";\r\n\r\nexport default {\r\n  getEmployees: function() {\r\n      console.log(\"route hit\");\r\n    return axios.get(\"https://randomuser.me/api/?results=100&nat=us\");\r\n  }\r\n};","import React, { Component } from \"react\";\r\nimport SearchForm from \"./Search\";\r\nimport ResultList from \"./Result\";\r\nimport API from \"../utils/API\";\r\n\r\nclass SearchResultContainer extends Component {\r\n    state = {\r\n        search: \"\",\r\n        employee: [],\r\n        results: [],\r\n        error: \"\"\r\n    };\r\n\r\n    // When the component mounts, get a list of all available base breeds and update this.state.breeds\r\n    componentDidMount() {\r\n        API.getEmployees()\r\n            .then(res => {\r\n                console.log(res);\r\n                const data = res.data.results;\r\n                const employeeRecords = [];\r\n                for (var i = 0; i < data.length; i++) {\r\n                    employeeRecords.push({\r\n                        firstName: data[i].name.first,\r\n                        lastName: data[i].name.last,\r\n                        email: data[i].email,\r\n                        picture: data[i].picture.thumbnail,\r\n                        phone: data[i].cell\r\n                    });\r\n                }\r\n                this.setState({ employee: employeeRecords, results: employeeRecords });\r\n                this.sortEmployees();\r\n            })\r\n            .catch((err) => console.log(err));\r\n    }\r\n\r\n    sortEmployees() {\r\n        const employees = this.state.results;\r\n\r\n        employees.sort(function(a, b) {\r\n            var nameA = a.firstName.toLowerCase();\r\n            var nameB = b.firstName.toLowerCase();\r\n            return (nameA < nameB) ? -1 : (nameA > nameB) ? 1 : 0;\r\n        }).then(\r\n        this.setState({ employee: employees })\r\n        );\r\n    };\r\n\r\n    searchEmployee = (value) => {\r\n        const employees = this.state.results;\r\n        const empSearch = [];\r\n        const search = value;\r\n        console.log(search);\r\n        for (var i = 0; i < employees.length; i++) {\r\n            if (employees[i].firstName.toLowerCase().indexOf(search.toLowerCase()) > -1) {\r\n                console.log(employees[i].firstName);\r\n                empSearch.push(employees[i]);\r\n            }\r\n        }\r\n        this.setState({ employee: empSearch });\r\n    };\r\n\r\n    handleInputChange = event => {\r\n        const value = event.target.value;\r\n        this.setState({\r\n            search: value\r\n        });\r\n\r\n        return this.searchEmployee(value);\r\n    };\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <h1>searching for {this.state.search}</h1>\r\n                <SearchForm\r\n                    handleInputChange={this.handleInputChange}\r\n                />\r\n                <table className=\"container\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Photo</th>\r\n                            <th>First Name</th>\r\n                            <th>Last Name</th>\r\n                            <th>Email</th>\r\n                            <th>Phone Number</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.state.employee.map((employee, key) => {\r\n                            return (<ResultList\r\n                                firstName={employee.firstName}\r\n                                lastName={employee.lastName}\r\n                                email={employee.email}\r\n                                phone={employee.phone}\r\n                                picture={employee.picture}\r\n                                key={key}\r\n                            />\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchResultContainer;","import React from \"react\";\nimport SearchResultContainer from \"./components/Container\";\n\nfunction App() {\n  return <SearchResultContainer />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}